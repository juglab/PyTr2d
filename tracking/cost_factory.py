import yaml
import io
from scipy.spatial import distance

class cost_factory:
    '''
    A cost factory serves all cost functions to set up a PyTr2d tracking problem.
    The individual cost functions are parametrized individually, with parameters being
    loaded from file or set programmatically.
    '''

    parameters = {
        'segmentation': [
            1,          # lambda (global scaling of this cost)
            1,          # w_size: factor for difference in size
            300,        # bias
        ],
        'appearance': [
            1,          # lambda (global scaling of this cost)
            0,          # min cost
            1,          # slope
            25,         # max value
        ],
        'disappearance': [
            1,          # lambda (global scaling of this cost)
            0,          # min cost
            1,          # slope
            15,         # max value
        ],
        'movement': [
            1,          # lambda (global scaling of this cost)
            1,          # w_dist: factor for distance in pixels
            0.5,        # w_size: factor for difference in size
        ],
        'division': [
            1,          # lambda (global scaling of this cost)
            1,          # w_dist: factor for distance in pixels
            1,          # w_size: factor for difference in size
        ]
    }

    def __init__(self, parameters_yaml_file=None):
        '''
        Constructor: if filename to parameters_yaml_file is not given, default values will be used
        '''
        if parameters_yaml_file is None:
            return
        self.load_parameters(parameters_yaml_file)

    def save_parameters(self, filename):
        '''
        Saves self.parameters in a YAML file for later reuse.
        :param filename: string pointing to the YAML file the parameters should be stored in.
        :return: nothing
        '''
        with io.open(filename, 'w', encoding='utf8') as outfile:
            yaml.dump(self.parameters, outfile, default_flow_style=False, allow_unicode=True)

    def load_parameters(self, filename):
        '''
        Loads a YAML file containing all cost funciton parameters (structure can be generated by saving a YAML
        using self.save_parameters).
        :param filename: string pointing to the YAML file the parameters should be stored in.
        :return: nothing
        '''
        with open(filename, 'r') as stream:
            self.parameters = yaml.safe_load(stream)



    def get_segmentation_cost(self,size):
        '''
        Explain what the f it does... and why it is negative... ;)
        :param size: size of the cell
        :param you: is
        :param need: this
        :return: returns the costs for an appearance event
        '''
        return -self.parameters['segmentation'][0]*self.parameters['segmentation'][0]*size

    def get_appearance_cost(self,size):
        '''
        Explain what the f it does...
        :param stuff: what
        :param you: is
        :param need: this
        :return: returns the costs for an appearance event
        '''
        return int(size) + 400

    def get_disappearance_cost(self):
        '''
        Explain what the f it does...
        :param stuff: what
        :param you: is
        :param need: this
        :return: returns the costs for an appearance event
        '''
        return 500

    def get_movement_cost(self,size1,centroid1,size2,centroid2):
        '''
        Explain what the f it does...
        :param stuff: what
        :param you: is
        :param need: this
        :return: returns the costs for an appearance event
        '''
        return self.parameters['movement'][0] * int( self.parameters['movement'][1] * distance.euclidean(centroid1,centroid2) + self.parameters['movement'][2] * abs(size1-size2))

    def get_division_cost(self,size1,centroid1,size2,centroid2,size3,centroid3):
        '''
        Explain what the f it does...
        :param stuff: what
        :param you: is
        :param need: this
        :return: returns the costs for an appearance event
        '''
        return int(abs(0.5 * size1 - size2 - size3) + (
                    distance.euclidean(centroid1, centroid2) + distance.euclidean(centroid1,
                                                                                  centroid3)) / 2 - distance.euclidean(
            centroid2, centroid3))